// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: admin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire'

export const protobufPackage = 'admin'

export interface ExampleRequest {
  requestData: string
}

export interface ExampleResponse {
  responseData: string
}

function createBaseExampleRequest(): ExampleRequest {
  return { requestData: '' }
}

export const ExampleRequest: MessageFns<ExampleRequest> = {
  encode(message: ExampleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestData !== '') {
      writer.uint32(10).string(message.requestData)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExampleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseExampleRequest()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.requestData = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): ExampleRequest {
    return { requestData: isSet(object.requestData) ? globalThis.String(object.requestData) : '' }
  },

  toJSON(message: ExampleRequest): unknown {
    const obj: any = {}
    if (message.requestData !== '') {
      obj.requestData = message.requestData
    }
    return obj
  },

  create<I extends Exact<DeepPartial<ExampleRequest>, I>>(base?: I): ExampleRequest {
    return ExampleRequest.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<ExampleRequest>, I>>(object: I): ExampleRequest {
    const message = createBaseExampleRequest()
    message.requestData = object.requestData ?? ''
    return message
  },
}

function createBaseExampleResponse(): ExampleResponse {
  return { responseData: '' }
}

export const ExampleResponse: MessageFns<ExampleResponse> = {
  encode(message: ExampleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.responseData !== '') {
      writer.uint32(10).string(message.responseData)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExampleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseExampleResponse()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.responseData = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): ExampleResponse {
    return {
      responseData: isSet(object.responseData) ? globalThis.String(object.responseData) : '',
    }
  },

  toJSON(message: ExampleResponse): unknown {
    const obj: any = {}
    if (message.responseData !== '') {
      obj.responseData = message.responseData
    }
    return obj
  },

  create<I extends Exact<DeepPartial<ExampleResponse>, I>>(base?: I): ExampleResponse {
    return ExampleResponse.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<ExampleResponse>, I>>(object: I): ExampleResponse {
    const message = createBaseExampleResponse()
    message.responseData = object.responseData ?? ''
    return message
  },
}

export interface AdminService {
  GetExample(request: ExampleRequest): Promise<ExampleResponse>
}

export const AdminServiceServiceName = 'admin.AdminService'
export class AdminServiceClientImpl implements AdminService {
  private readonly rpc: Rpc
  private readonly service: string
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AdminServiceServiceName
    this.rpc = rpc
    this.GetExample = this.GetExample.bind(this)
  }
  GetExample(request: ExampleRequest): Promise<ExampleResponse> {
    const data = ExampleRequest.encode(request).finish()
    const promise = this.rpc.request(this.service, 'GetExample', data)
    return promise.then((data) => ExampleResponse.decode(new BinaryReader(data)))
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>

type KeysOfUnion<T> = T extends T ? keyof T : never
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never }

function isSet(value: any): boolean {
  return value !== null && value !== undefined
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter
  decode(input: BinaryReader | Uint8Array, length?: number): T
  fromJSON(object: any): T
  toJSON(message: T): unknown
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T
}
