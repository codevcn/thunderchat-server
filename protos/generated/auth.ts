// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: auth.proto

/* eslint-disable */
import { Observable } from 'rxjs'
import type { Empty } from './google/protobuf/empty'

export const protobufPackage = 'auth'

export interface ValidateSocketConnectionRequest {
  socketJson: string
}

export interface ValidateSocketAuthRequest {
  clientSocketJson: string
}

export interface ValidateSocketAuthResponse {
  clientSocketAuthJson: string
}

export interface ValidateVoiceCallSocketAuthRequest {
  clientSocketJson: string
}

export interface ValidateVoiceCallSocketAuthResponse {
  voiceCallSocketAuthJson: string
}

export interface VerifyTokenRequest {
  token: string
}

export interface VerifyTokenResponse {
  userJson: string
}

export interface CreateJWTRequest {
  email: string
  userId: number
}

export interface CreateJWTResponse {
  jwtToken: string
}

export interface SendClientJWTRequest {
  token: string
  cookieOtpsJson: string
}

export interface CompareHashedPasswordRequest {
  password: string
  encrypted: string
}

export interface CompareHashedPasswordResponse {
  isValid: boolean
}

export interface GetHashedPasswordRequest {
  plainPassword: string
}

export interface GetHashedPasswordResponse {
  hashedPassword: string
}

export interface GetJWTcookieOtpsResponse {
  cookieOtpsJson: string
}

export interface AuthService {
  ValidateSocketConnection(request: ValidateSocketConnectionRequest): Observable<Empty>
  ValidateSocketAuth(request: ValidateSocketAuthRequest): Observable<ValidateSocketAuthResponse>
  ValidateVoiceCallSocketAuth(
    request: ValidateVoiceCallSocketAuthRequest
  ): Observable<ValidateVoiceCallSocketAuthResponse>
  VerifyToken(request: VerifyTokenRequest): Observable<VerifyTokenResponse>
}

export interface JWTService {
  CreateJWT(request: CreateJWTRequest): Observable<CreateJWTResponse>
  GetJWTcookieOtps(request: Empty): Observable<GetJWTcookieOtpsResponse>
}

export interface CredentialsService {
  CompareHashedPassword(
    request: CompareHashedPasswordRequest
  ): Observable<CompareHashedPasswordResponse>
  GetHashedPassword(request: GetHashedPasswordRequest): Observable<GetHashedPasswordResponse>
}
