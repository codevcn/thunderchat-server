// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: search.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire'
import { Empty } from './google/protobuf/empty'
import { Struct } from './google/protobuf/struct'

export const protobufPackage = 'search'

export interface DataToSync {
  type: string
  dataObject?: DataToSyncObject | undefined
  dataArray?: DataToSyncArray | undefined
}

export interface DataToSyncObject {
  data: { [key: string]: any } | undefined
}

export interface DataToSyncArray {
  data: number[]
}

function createBaseDataToSync(): DataToSync {
  return { type: '', dataObject: undefined, dataArray: undefined }
}

export const DataToSync: MessageFns<DataToSync> = {
  encode(message: DataToSync, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== '') {
      writer.uint32(10).string(message.type)
    }
    if (message.dataObject !== undefined) {
      DataToSyncObject.encode(message.dataObject, writer.uint32(18).fork()).join()
    }
    if (message.dataArray !== undefined) {
      DataToSyncArray.encode(message.dataArray, writer.uint32(26).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataToSync {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseDataToSync()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.type = reader.string()
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.dataObject = DataToSyncObject.decode(reader, reader.uint32())
          continue
        }
        case 3: {
          if (tag !== 26) {
            break
          }

          message.dataArray = DataToSyncArray.decode(reader, reader.uint32())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): DataToSync {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : '',
      dataObject: isSet(object.dataObject)
        ? DataToSyncObject.fromJSON(object.dataObject)
        : undefined,
      dataArray: isSet(object.dataArray) ? DataToSyncArray.fromJSON(object.dataArray) : undefined,
    }
  },

  toJSON(message: DataToSync): unknown {
    const obj: any = {}
    if (message.type !== '') {
      obj.type = message.type
    }
    if (message.dataObject !== undefined) {
      obj.dataObject = DataToSyncObject.toJSON(message.dataObject)
    }
    if (message.dataArray !== undefined) {
      obj.dataArray = DataToSyncArray.toJSON(message.dataArray)
    }
    return obj
  },

  create<I extends Exact<DeepPartial<DataToSync>, I>>(base?: I): DataToSync {
    return DataToSync.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<DataToSync>, I>>(object: I): DataToSync {
    const message = createBaseDataToSync()
    message.type = object.type ?? ''
    message.dataObject =
      object.dataObject !== undefined && object.dataObject !== null
        ? DataToSyncObject.fromPartial(object.dataObject)
        : undefined
    message.dataArray =
      object.dataArray !== undefined && object.dataArray !== null
        ? DataToSyncArray.fromPartial(object.dataArray)
        : undefined
    return message
  },
}

function createBaseDataToSyncObject(): DataToSyncObject {
  return { data: undefined }
}

export const DataToSyncObject: MessageFns<DataToSyncObject> = {
  encode(message: DataToSyncObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      Struct.encode(Struct.wrap(message.data), writer.uint32(10).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataToSyncObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseDataToSyncObject()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()))
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): DataToSyncObject {
    return { data: isObject(object.data) ? object.data : undefined }
  },

  toJSON(message: DataToSyncObject): unknown {
    const obj: any = {}
    if (message.data !== undefined) {
      obj.data = message.data
    }
    return obj
  },

  create<I extends Exact<DeepPartial<DataToSyncObject>, I>>(base?: I): DataToSyncObject {
    return DataToSyncObject.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<DataToSyncObject>, I>>(object: I): DataToSyncObject {
    const message = createBaseDataToSyncObject()
    message.data = object.data ?? undefined
    return message
  },
}

function createBaseDataToSyncArray(): DataToSyncArray {
  return { data: [] }
}

export const DataToSyncArray: MessageFns<DataToSyncArray> = {
  encode(message: DataToSyncArray, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork()
    for (const v of message.data) {
      writer.int32(v)
    }
    writer.join()
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataToSyncArray {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseDataToSyncArray()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.data.push(reader.int32())

            continue
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos
            while (reader.pos < end2) {
              message.data.push(reader.int32())
            }

            continue
          }

          break
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): DataToSyncArray {
    return {
      data: globalThis.Array.isArray(object?.data)
        ? object.data.map((e: any) => globalThis.Number(e))
        : [],
    }
  },

  toJSON(message: DataToSyncArray): unknown {
    const obj: any = {}
    if (message.data?.length) {
      obj.data = message.data.map((e) => Math.round(e))
    }
    return obj
  },

  create<I extends Exact<DeepPartial<DataToSyncArray>, I>>(base?: I): DataToSyncArray {
    return DataToSyncArray.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<DataToSyncArray>, I>>(object: I): DataToSyncArray {
    const message = createBaseDataToSyncArray()
    message.data = object.data?.map((e) => e) || []
    return message
  },
}

export interface ElasticSearchService {
  SyncDataToES(request: DataToSync): Promise<Empty>
}

export const ElasticSearchServiceServiceName = 'search.ElasticSearchService'
export class ElasticSearchServiceClientImpl implements ElasticSearchService {
  private readonly rpc: Rpc
  private readonly service: string
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ElasticSearchServiceServiceName
    this.rpc = rpc
    this.SyncDataToES = this.SyncDataToES.bind(this)
  }
  SyncDataToES(request: DataToSync): Promise<Empty> {
    const data = DataToSync.encode(request).finish()
    const promise = this.rpc.request(this.service, 'SyncDataToES', data)
    return promise.then((data) => Empty.decode(new BinaryReader(data)))
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>

type KeysOfUnion<T> = T extends T ? keyof T : never
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never }

function isObject(value: any): boolean {
  return typeof value === 'object' && value !== null
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter
  decode(input: BinaryReader | Uint8Array, length?: number): T
  fromJSON(object: any): T
  toJSON(message: T): unknown
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T
}
