// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: friend.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire'

export const protobufPackage = 'friend'

export interface IsFriendRequest {
  userId: number
  friendId: number
}

export interface IsFriendResponse {
  isFriend: boolean
}

function createBaseIsFriendRequest(): IsFriendRequest {
  return { userId: 0, friendId: 0 }
}

export const IsFriendRequest: MessageFns<IsFriendRequest> = {
  encode(message: IsFriendRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int64(message.userId)
    }
    if (message.friendId !== 0) {
      writer.uint32(16).int64(message.friendId)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsFriendRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseIsFriendRequest()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break
          }

          message.userId = longToNumber(reader.int64())
          continue
        }
        case 2: {
          if (tag !== 16) {
            break
          }

          message.friendId = longToNumber(reader.int64())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): IsFriendRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      friendId: isSet(object.friendId) ? globalThis.Number(object.friendId) : 0,
    }
  },

  toJSON(message: IsFriendRequest): unknown {
    const obj: any = {}
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId)
    }
    if (message.friendId !== 0) {
      obj.friendId = Math.round(message.friendId)
    }
    return obj
  },

  create<I extends Exact<DeepPartial<IsFriendRequest>, I>>(base?: I): IsFriendRequest {
    return IsFriendRequest.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<IsFriendRequest>, I>>(object: I): IsFriendRequest {
    const message = createBaseIsFriendRequest()
    message.userId = object.userId ?? 0
    message.friendId = object.friendId ?? 0
    return message
  },
}

function createBaseIsFriendResponse(): IsFriendResponse {
  return { isFriend: false }
}

export const IsFriendResponse: MessageFns<IsFriendResponse> = {
  encode(message: IsFriendResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isFriend !== false) {
      writer.uint32(8).bool(message.isFriend)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsFriendResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseIsFriendResponse()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break
          }

          message.isFriend = reader.bool()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): IsFriendResponse {
    return { isFriend: isSet(object.isFriend) ? globalThis.Boolean(object.isFriend) : false }
  },

  toJSON(message: IsFriendResponse): unknown {
    const obj: any = {}
    if (message.isFriend !== false) {
      obj.isFriend = message.isFriend
    }
    return obj
  },

  create<I extends Exact<DeepPartial<IsFriendResponse>, I>>(base?: I): IsFriendResponse {
    return IsFriendResponse.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<IsFriendResponse>, I>>(object: I): IsFriendResponse {
    const message = createBaseIsFriendResponse()
    message.isFriend = object.isFriend ?? false
    return message
  },
}

export interface FriendService {
  IsFriend(request: IsFriendRequest): Promise<IsFriendResponse>
}

export const FriendServiceServiceName = 'friend.FriendService'
export class FriendServiceClientImpl implements FriendService {
  private readonly rpc: Rpc
  private readonly service: string
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || FriendServiceServiceName
    this.rpc = rpc
    this.IsFriend = this.IsFriend.bind(this)
  }
  IsFriend(request: IsFriendRequest): Promise<IsFriendResponse> {
    const data = IsFriendRequest.encode(request).finish()
    const promise = this.rpc.request(this.service, 'IsFriend', data)
    return promise.then((data) => IsFriendResponse.decode(new BinaryReader(data)))
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>

type KeysOfUnion<T> = T extends T ? keyof T : never
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never }

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString())
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER')
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER')
  }
  return num
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter
  decode(input: BinaryReader | Uint8Array, length?: number): T
  fromJSON(object: any): T
  toJSON(message: T): unknown
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T
}
