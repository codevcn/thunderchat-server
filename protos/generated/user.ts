// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire'
import { Struct } from './google/protobuf/struct'

export const protobufPackage = 'user'

export interface FindUserWithProfileByIdRequest {
  userId: number
}

export interface FindUserWithProfileByIdResponse {
  user: { [key: string]: any } | undefined
}

export interface FindByUserIdRequest {
  userId: number
}

export interface FindByUserIdResponse {
  userSettings: { [key: string]: any } | undefined
}

export interface CheckBlockedUserRequest {
  blockerId: number
  blockedId: number
}

export interface CheckBlockedUserResponse {
  blockedUser: { [key: string]: any } | undefined
}

function createBaseFindUserWithProfileByIdRequest(): FindUserWithProfileByIdRequest {
  return { userId: 0 }
}

export const FindUserWithProfileByIdRequest: MessageFns<FindUserWithProfileByIdRequest> = {
  encode(
    message: FindUserWithProfileByIdRequest,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int64(message.userId)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserWithProfileByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseFindUserWithProfileByIdRequest()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break
          }

          message.userId = longToNumber(reader.int64())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): FindUserWithProfileByIdRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 }
  },

  toJSON(message: FindUserWithProfileByIdRequest): unknown {
    const obj: any = {}
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId)
    }
    return obj
  },

  create<I extends Exact<DeepPartial<FindUserWithProfileByIdRequest>, I>>(
    base?: I
  ): FindUserWithProfileByIdRequest {
    return FindUserWithProfileByIdRequest.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<FindUserWithProfileByIdRequest>, I>>(
    object: I
  ): FindUserWithProfileByIdRequest {
    const message = createBaseFindUserWithProfileByIdRequest()
    message.userId = object.userId ?? 0
    return message
  },
}

function createBaseFindUserWithProfileByIdResponse(): FindUserWithProfileByIdResponse {
  return { user: undefined }
}

export const FindUserWithProfileByIdResponse: MessageFns<FindUserWithProfileByIdResponse> = {
  encode(
    message: FindUserWithProfileByIdResponse,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.user !== undefined) {
      Struct.encode(Struct.wrap(message.user), writer.uint32(10).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserWithProfileByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseFindUserWithProfileByIdResponse()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.user = Struct.unwrap(Struct.decode(reader, reader.uint32()))
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): FindUserWithProfileByIdResponse {
    return { user: isObject(object.user) ? object.user : undefined }
  },

  toJSON(message: FindUserWithProfileByIdResponse): unknown {
    const obj: any = {}
    if (message.user !== undefined) {
      obj.user = message.user
    }
    return obj
  },

  create<I extends Exact<DeepPartial<FindUserWithProfileByIdResponse>, I>>(
    base?: I
  ): FindUserWithProfileByIdResponse {
    return FindUserWithProfileByIdResponse.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<FindUserWithProfileByIdResponse>, I>>(
    object: I
  ): FindUserWithProfileByIdResponse {
    const message = createBaseFindUserWithProfileByIdResponse()
    message.user = object.user ?? undefined
    return message
  },
}

function createBaseFindByUserIdRequest(): FindByUserIdRequest {
  return { userId: 0 }
}

export const FindByUserIdRequest: MessageFns<FindByUserIdRequest> = {
  encode(message: FindByUserIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int64(message.userId)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindByUserIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseFindByUserIdRequest()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break
          }

          message.userId = longToNumber(reader.int64())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): FindByUserIdRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 }
  },

  toJSON(message: FindByUserIdRequest): unknown {
    const obj: any = {}
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId)
    }
    return obj
  },

  create<I extends Exact<DeepPartial<FindByUserIdRequest>, I>>(base?: I): FindByUserIdRequest {
    return FindByUserIdRequest.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<FindByUserIdRequest>, I>>(
    object: I
  ): FindByUserIdRequest {
    const message = createBaseFindByUserIdRequest()
    message.userId = object.userId ?? 0
    return message
  },
}

function createBaseFindByUserIdResponse(): FindByUserIdResponse {
  return { userSettings: undefined }
}

export const FindByUserIdResponse: MessageFns<FindByUserIdResponse> = {
  encode(message: FindByUserIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userSettings !== undefined) {
      Struct.encode(Struct.wrap(message.userSettings), writer.uint32(10).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindByUserIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseFindByUserIdResponse()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.userSettings = Struct.unwrap(Struct.decode(reader, reader.uint32()))
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): FindByUserIdResponse {
    return { userSettings: isObject(object.userSettings) ? object.userSettings : undefined }
  },

  toJSON(message: FindByUserIdResponse): unknown {
    const obj: any = {}
    if (message.userSettings !== undefined) {
      obj.userSettings = message.userSettings
    }
    return obj
  },

  create<I extends Exact<DeepPartial<FindByUserIdResponse>, I>>(base?: I): FindByUserIdResponse {
    return FindByUserIdResponse.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<FindByUserIdResponse>, I>>(
    object: I
  ): FindByUserIdResponse {
    const message = createBaseFindByUserIdResponse()
    message.userSettings = object.userSettings ?? undefined
    return message
  },
}

function createBaseCheckBlockedUserRequest(): CheckBlockedUserRequest {
  return { blockerId: 0, blockedId: 0 }
}

export const CheckBlockedUserRequest: MessageFns<CheckBlockedUserRequest> = {
  encode(
    message: CheckBlockedUserRequest,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.blockerId !== 0) {
      writer.uint32(8).int64(message.blockerId)
    }
    if (message.blockedId !== 0) {
      writer.uint32(16).int64(message.blockedId)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckBlockedUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseCheckBlockedUserRequest()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break
          }

          message.blockerId = longToNumber(reader.int64())
          continue
        }
        case 2: {
          if (tag !== 16) {
            break
          }

          message.blockedId = longToNumber(reader.int64())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): CheckBlockedUserRequest {
    return {
      blockerId: isSet(object.blockerId) ? globalThis.Number(object.blockerId) : 0,
      blockedId: isSet(object.blockedId) ? globalThis.Number(object.blockedId) : 0,
    }
  },

  toJSON(message: CheckBlockedUserRequest): unknown {
    const obj: any = {}
    if (message.blockerId !== 0) {
      obj.blockerId = Math.round(message.blockerId)
    }
    if (message.blockedId !== 0) {
      obj.blockedId = Math.round(message.blockedId)
    }
    return obj
  },

  create<I extends Exact<DeepPartial<CheckBlockedUserRequest>, I>>(
    base?: I
  ): CheckBlockedUserRequest {
    return CheckBlockedUserRequest.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<CheckBlockedUserRequest>, I>>(
    object: I
  ): CheckBlockedUserRequest {
    const message = createBaseCheckBlockedUserRequest()
    message.blockerId = object.blockerId ?? 0
    message.blockedId = object.blockedId ?? 0
    return message
  },
}

function createBaseCheckBlockedUserResponse(): CheckBlockedUserResponse {
  return { blockedUser: undefined }
}

export const CheckBlockedUserResponse: MessageFns<CheckBlockedUserResponse> = {
  encode(
    message: CheckBlockedUserResponse,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.blockedUser !== undefined) {
      Struct.encode(Struct.wrap(message.blockedUser), writer.uint32(10).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckBlockedUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    const end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseCheckBlockedUserResponse()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.blockedUser = Struct.unwrap(Struct.decode(reader, reader.uint32()))
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): CheckBlockedUserResponse {
    return { blockedUser: isObject(object.blockedUser) ? object.blockedUser : undefined }
  },

  toJSON(message: CheckBlockedUserResponse): unknown {
    const obj: any = {}
    if (message.blockedUser !== undefined) {
      obj.blockedUser = message.blockedUser
    }
    return obj
  },

  create<I extends Exact<DeepPartial<CheckBlockedUserResponse>, I>>(
    base?: I
  ): CheckBlockedUserResponse {
    return CheckBlockedUserResponse.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<CheckBlockedUserResponse>, I>>(
    object: I
  ): CheckBlockedUserResponse {
    const message = createBaseCheckBlockedUserResponse()
    message.blockedUser = object.blockedUser ?? undefined
    return message
  },
}

export interface UserService {
  FindUserWithProfileById(
    request: FindUserWithProfileByIdRequest
  ): Promise<FindUserWithProfileByIdResponse>
}

export const UserServiceServiceName = 'user.UserService'
export class UserServiceClientImpl implements UserService {
  private readonly rpc: Rpc
  private readonly service: string
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UserServiceServiceName
    this.rpc = rpc
    this.FindUserWithProfileById = this.FindUserWithProfileById.bind(this)
  }
  FindUserWithProfileById(
    request: FindUserWithProfileByIdRequest
  ): Promise<FindUserWithProfileByIdResponse> {
    const data = FindUserWithProfileByIdRequest.encode(request).finish()
    const promise = this.rpc.request(this.service, 'FindUserWithProfileById', data)
    return promise.then((data) => FindUserWithProfileByIdResponse.decode(new BinaryReader(data)))
  }
}

export interface UserSettingsService {
  FindByUserId(request: FindByUserIdRequest): Promise<FindByUserIdResponse>
}

export const UserSettingsServiceServiceName = 'user.UserSettingsService'
export class UserSettingsServiceClientImpl implements UserSettingsService {
  private readonly rpc: Rpc
  private readonly service: string
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UserSettingsServiceServiceName
    this.rpc = rpc
    this.FindByUserId = this.FindByUserId.bind(this)
  }
  FindByUserId(request: FindByUserIdRequest): Promise<FindByUserIdResponse> {
    const data = FindByUserIdRequest.encode(request).finish()
    const promise = this.rpc.request(this.service, 'FindByUserId', data)
    return promise.then((data) => FindByUserIdResponse.decode(new BinaryReader(data)))
  }
}

export interface BlockUserService {
  CheckBlockedUser(request: CheckBlockedUserRequest): Promise<CheckBlockedUserResponse>
}

export const BlockUserServiceServiceName = 'user.BlockUserService'
export class BlockUserServiceClientImpl implements BlockUserService {
  private readonly rpc: Rpc
  private readonly service: string
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || BlockUserServiceServiceName
    this.rpc = rpc
    this.CheckBlockedUser = this.CheckBlockedUser.bind(this)
  }
  CheckBlockedUser(request: CheckBlockedUserRequest): Promise<CheckBlockedUserResponse> {
    const data = CheckBlockedUserRequest.encode(request).finish()
    const promise = this.rpc.request(this.service, 'CheckBlockedUser', data)
    return promise.then((data) => CheckBlockedUserResponse.decode(new BinaryReader(data)))
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>

type KeysOfUnion<T> = T extends T ? keyof T : never
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never }

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString())
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER')
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER')
  }
  return num
}

function isObject(value: any): boolean {
  return typeof value === 'object' && value !== null
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter
  decode(input: BinaryReader | Uint8Array, length?: number): T
  fromJSON(object: any): T
  toJSON(message: T): unknown
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T
}
